import heapq

def dijkstra(graph, start):
    queue = [(0, start)]
    dist = {start: 0}
    while queue:
        (cost, node) = heapq.heappop(queue)
        if node in dist and dist[node] < cost:
            continue
        for neighbor, weight in graph[node]:
            new_cost = cost + weight
            if neighbor not in dist or new_cost < dist[neighbor]:
                dist[neighbor] = new_cost
                heapq.heappush(queue, (new_cost, neighbor))
    return dist
graph_dict = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1)]
 }
print("\nShortest path from A:", dijkstra(graph_dict, 'A'))
